<?xml version="1.0" encoding="UTF-8"?>
<project name="kilix/api-core-bundle" default="build">
    <target name="build"
            depends="prepare,lint,phpcs,phpunit"
            description=""/>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
        <property name="prepare.done" value="true"/>
    </target>

    <!-- composer -->
    <property name="composer.allow-update" value="true"/>

    <target name="composer-exists" description="Check that composer exists">
        <available property="composer.exists" file="${basedir}/composer.phar" />
    </target>

    <target name="composer-self-update" unless="composer.installed" description="Self-update Composer">
        <echo message="Self-updating composer" level="debug"/>
        <exec executable="php">
            <arg value="${basedir}/composer.phar" />
            <arg value="self-update" />
            <arg value="--quiet" />
            <arg value="--no-interaction" />
        </exec>
        <echo message="composer self-update complete" level="debug"/>
    </target>

    <target name="composer-self-install" unless="composer.exists" depends='composer-exists' description="Fetch Composer if it doesn't exist">
        <echo message="Self-installing composer" level="debug"/>
        <property name="composer.installed" value="true"/>
        <property name="composer.exists" value="true" />
        <exec executable="/bin/bash">
            <arg value="-c" />
            <arg value="curl -s https://getcomposer.org/installer | php" />
        </exec>
        <echo message="composer self-install complete" level="debug"/>
    </target>

    <target name="composer" depends="composer-self-install, composer-self-update" if="composer.exists">
        <condition property="composer.command" value="update" else="install">
            <and>
                <istrue value="${composer.allow-update}"/>
                <available file="composer.lock"/>
            </and>
        </condition>
        <echo message="Beginning composer ${composer.command}" level="debug" />
        <exec executable="php">
            <arg value="${basedir}/composer.phar" />
            <arg value="${composer.command}" />
            <arg value="--no-interaction" />
            <arg value="--optimize-autoloader" />
            <arg value="--dev" />
        </exec>
        <echo message="composer ${composer.command} complete" level="debug"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l"/>

            <fileset dir="${basedir}">
                <include name="**/*.php"/>
                <exclude name="vendor/**/*.php"/>
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phpcs"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=vendor"/>
            <arg path="${basedir}"/>
        </exec>
    </target>

    <target name="phpunit"
            depends="prepare, composer"
            description="Run unit tests with PHPUnit">
        <exec executable="phpunit" failonerror="true">
            <arg value="--log-junit"/>
            <arg path="${basedir}/build/phpunit.xml"/>
            <arg value="--coverage-clover"/>
            <arg path="${basedir}/build/coverage/clover.xml"/>
            <arg value="--coverage-html"/>
            <arg path="${basedir}/build/coverage"/>
        </exec>
    </target>
</project>
