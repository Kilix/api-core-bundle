<?xml version="1.0" encoding="UTF-8"?>
<project name="kilix/api-core-bundle" default="build">

    <!-- By default, we assume all tools to be on the $PATH -->
    <property name="toolsdir" value=""/>

    <!-- Uncomment the following when the tools are in ${basedir}/vendor/bin -->
    <!-- <property name="toolsdir" value="${basedir}/vendor/bin/"/> -->

    <target name="build"
            depends="prepare,lint,phpunit"
            description=""/>

    <target name="build-metric"
            depends="prepare,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit-ci,phpdox"
            description=""/>

    <target name="build-metric-parallel"
            depends="prepare,lint,tools-parallel,phpunit-ci,phpdox"
            description=""/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc-ci"/>
        </parallel>
    </target>

    <!-- prepare project directory -->

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/build/phpdox"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
        <property name="prepare.done" value="true"/>
    </target>

    <!-- composer -->
    <property name="composer.allow-update" value="false"/>
    <property name="composer.optimize-autoload" value="false"/>

    <target name="composer-exists" description="Check that composer exists">
        <available property="composer.exists" file="${basedir}/composer.phar"/>
    </target>

    <target name="composer-self-update" unless="composer.installed" description="Self-update Composer">
        <echo message="Self-updating composer" level="debug"/>
        <exec executable="php">
            <arg value="${basedir}/composer.phar"/>
            <arg value="self-update"/>
            <arg value="--quiet"/>
            <arg value="--no-interaction"/>
        </exec>
        <echo message="composer self-update complete" level="debug"/>
    </target>

    <target name="composer-self-install" unless="composer.exists" depends='composer-exists'
            description="Fetch Composer if it doesn't exist">
        <echo message="Self-installing composer" level="debug"/>
        <property name="composer.installed" value="true"/>
        <property name="composer.exists" value="true"/>
        <exec executable="/bin/bash">
            <arg value="-c"/>
            <arg value="curl -s https://getcomposer.org/installer | php"/>
        </exec>
        <echo message="composer self-install complete" level="debug"/>
    </target>

    <target name="composer" depends="composer-self-install, composer-self-update" if="composer.exists">
        <condition property="composer.command" value="update" else="install">
            <and>
                <istrue value="${composer.allow-update}"/>
                <available file="composer.lock"/>
            </and>
        </condition>
        <condition property="composer.optimize-autoloader-option" value="--optimize-autoloader" else="">
            <istrue value="${composer.optimize-autoload}"/>
        </condition>
        <echo message="Beginning composer ${composer.command}" level="debug"/>
        <exec executable="php">
            <arg value="${basedir}/composer.phar"/>
            <arg value="${composer.command}"/>
            <arg line="--no-interaction"/>
            <arg line="${composer.optimize-autoloader-option}"/>
            <arg line="--dev"/>
        </exec>
        <echo message="composer ${composer.command} complete" level="debug"/>
    </target>

    <!-- npm install + bower install + grunt or gulp -->

    <target name="npm-install" description="install nodesjsackages dependencies">
        <echo message="installing nodejs packages by npm" level="debug"/>
        <exec executable="npm">
            <arg value="install"/>
        </exec>
        <echo message="npm install complete" level="debug"/>
    </target>

    <!-- check syntax -->

    <target name="lint" depends="lint-php" description="Perform syntax check of sourcecode files"/>

    <target name="lint-php" description="Perform syntax check of PHP files">
        <apply executable="php" failonerror="true">
            <arg value="-l"/>

            <fileset dir="${basedir}">
                <include name="**/*.php"/>
                <exclude name="vendor/**/*.php"/>
                <exclude name="bin/**/*"/>
                <exclude name="build/**/*"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="lint-twig" depends="composer" description="Perform syntax check of twig files">
        <apply executable="php" failonerror="true">
            <arg value="app/console"/>
            <arg value="twig:lint"/>

            <fileset dir="${basedir}">
                <include name="**/*.twig"/>
                <exclude name="vendor/**/*.twig"/>
                <exclude name="bin/**/*"/>
                <exclude name="build/**/*"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="phploc"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${toolsdir}phploc">
            <arg value="--exclude=vendor"/>
            <arg value="--exclude=build"/>
            <arg value="--count-tests"/>
            <arg path="${basedir}"/>

        </exec>
    </target>

    <target name="phploc-ci"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phploc">
            <arg value="--exclude=vendor"/>
            <arg value="--exclude=build"/>
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${basedir}/build/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${basedir}/build/logs/phploc.xml"/>
            <arg path="${basedir}"/>
        </exec>
    </target>

    <target name="pdepend"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>
            <arg value="--ignore=vendor,build"/>
            <arg path="${basedir}"/>
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpmd">
            <arg path="${basedir}"/>
            <arg value="text"/>
            <arg path="${basedir}/build/phpmd.xml"/>
            <arg value="--exclude"/>
            <arg value="build,vendor"/>
        </exec>
    </target>

    <target name="phpmd-ci"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpmd">
            <arg path="${basedir}"/>
            <arg value="xml"/>
            <arg path="${basedir}/build/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg path="${basedir}/build/logs/pmd.xml"/>
            <arg value="--exclude"/>
            <arg value="build,vendor"/>
        </exec>
    </target>

    <!-- check coding style -->

    <target name="phpcs"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpcs">
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php,vendor,build"/>
            <arg path="${basedir}"/>
        </exec>
    </target>

    <target name="phpcs-ci"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcs" output="/dev/null">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php,vendor,build"/>
            <arg path="${basedir}"/>
        </exec>
    </target>

    <target name="phpcpd"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpcpd">
            <arg path="${basedir}"/>
            <arg value="--exclude=vendor"/>
            <arg value="--exclude=build"/>
        </exec>
    </target>

    <target name="phpcpd-ci"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcpd">
            <arg value="--log-pmd"/>
            <arg path="${basedir}/build/logs/pmd-cpd.xml"/>
            <arg path="${basedir}"/>
            <arg value="--exclude=vendor"/>
            <arg value="--exclude=build"/>
        </exec>
    </target>

    <!-- execute tests -->
    <target name="phpunit"
            depends="prepare, composer"
            description="Run unit tests with PHPUnit">
        <exec executable="${toolsdir}phpunit" failonerror="true">
            <arg value="--configuration"/>
            <arg path="${basedir}"/>
            <arg value="--log-junit"/>
            <arg path="${basedir}/build/logs/junit.xml"/>
        </exec>
    </target>

    <target name="phpunit-ci"
            depends="prepare, composer"
            description="Run unit tests with PHPUnit">
        <exec executable="${toolsdir}phpunit" failonerror="true">
            <arg value="--configuration"/>
            <arg path="${basedir}"/>
            <arg value="--log-junit"/>
            <arg path="${basedir}/build/logs/junit.xml"/>
            <arg value="--coverage-clover"/>
            <arg path="${basedir}/build/logs/clover.xml"/>
            <arg value="--coverage-crap4j"/>
            <arg path="${basedir}/build/logs/crap4j.xml"/>
            <arg value="--coverage-html"/>
            <arg path="${basedir}/build/coverage"/>
        </exec>
    </target>

    <target name="phpdox"
            depends="phploc-ci,phpcs-ci,phpmd-ci"
            description="Generate project documentation using phpDox">
        <exec executable="${toolsdir}phpdox">
            <arg value="-f"/>
            <arg path="${basedir}/build/phpdox.xml"/>
        </exec>
    </target>
</project>
